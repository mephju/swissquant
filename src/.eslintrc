{
  // I want to use babel-eslint for parsing!
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true,
      "impliedStrict": true
    }
  },
  "env": {
    // I write for browser
    "browser": true,
    // in CommonJS
    "node": true,
    "es6":true
  },
  "plugins": ["react","flowtype"],
  "extends": [
    "plugin:flowtype/recommended",
    "eslint:recommended",
    "plugin:react/recommended"
  ],
  "globals": {
    "fixture": true,
    "test": true
  },
  // To give you an idea how to override rule options:
  "rules": {
    "no-unresovled":0,
    "quotes": [2, "single"],
    "eol-last": [0],
    "no-mixed-requires": [0],
    "no-underscore-dangle": [0],
    "strict": 0,
    "no-debugger": 0,
    "indent": [1, 2],
    "linebreak-style": ["error", "unix"],

    "semi": ["error", "never"], // never use semicolons

    // override default options for rules from base configurations
    "comma-dangle": [0, "always"],
    "no-cond-assign": ["error", "always"],

    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/react-in-jsx-scope": 2,

    // disable rules from base configurations
    "no-console": 0,
    "no-dupe-args":2,
    "no-dupe-keys":2,
    "array-bracket-spacing": 2,
    "camelcase": 2,
    "comma-spacing": [0, {"before": false, "after": true}],
    // "curly": [2, "multi"],
    "no-self-assign": 2,
    "no-extra-boolean-cast": 0,
    "flowtype/boolean-style": [
      2,
      "boolean"
    ],
    "flowtype/define-flow-type": 1,
    "flowtype/delimiter-dangle": [
      0,
      "never"
    ],
    "flowtype/generic-spacing": [
      2,
      "never"
    ],
    "flowtype/no-primitive-constructor-types": 2,
    "flowtype/no-weak-types": 0,
    "flowtype/object-type-delimiter": [
      2,
      "comma"
    ],
    // "flowtype/require-parameter-type": 2,
    // "flowtype/require-return-type": [
    //   2,
    //   "always",
    //   {
    //     "annotateUndefined": "never"
    //   }
    // ],
    // "flowtype/require-valid-file-annotation": 2,
    "flowtype/semi": [
      2,
      "always"
    ],
    "flowtype/space-after-type-colon": [
      2,
      "always"
    ],
    "flowtype/space-before-generic-bracket": [
      2,
      "never"
    ],
    "flowtype/space-before-type-colon": [
      2,
      "never"
    ],
    "flowtype/type-id-match": [
      2,
      "^([A-Z][a-z0-9]+)+"
    ],
    "flowtype/union-intersection-spacing": [
      2,
      "always"
    ],
    "flowtype/use-flow-type": 1,
    "flowtype/valid-syntax": 1

  }
}